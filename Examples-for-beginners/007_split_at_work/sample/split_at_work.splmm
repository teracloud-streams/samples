/*
This example shows how a Split operator can be used to split the
incoming tuples based on a key. In this example, the split
criteria (i.e. which tuples will come out on which port) is 
pre-configured through a text file. Alternatively, one can 
compute the index of the output port on the fly inside the
Split operator parameter section.

It also gives a gentle introduction to the simple use of the
mixed mode programming by combining PERL code inside SPL code.
*/
namespace sample;

composite split_at_work 
{
	type 
		StockReportSchema = tuple <rstring symbol, rstring dateTime, float64 closingPrice, uint32 volume>;

	graph
		stream<StockReportSchema> StockReport = FileSource() {
			param
				file: getApplicationDir() + "/data/stock_report.dat";
				format: csv;
				hasDelayField: true;
		}

		// Create a PERL loop to emit 26 output streams.
		<% my $cnt=0; %>
		(<% for ($cnt=1; $cnt<=26; $cnt++) {%>
			stream<StockReportSchema> StockReportOutput<%=$cnt%>
 
			<% if ($cnt < 26) { %>
				;
			<% }%>
		<% } %>) 
		= Split(StockReport) {
			param
			// index: hashCode(toCharacterCode(symbol, 0) - toCharacterCode("A", 0));
				file: getApplicationDir() +"/data/mapping.txt";

				key:  symbol;
		}

		// Let us randomly tap into 3 out of 26 output streams, and write them to file sinks.
		() as FileWriter1 = FileSink(StockReportOutput1) {
			param 
				file: "/tmp/007_split_split_ticker_output_stream_1.result";
		}

		() as FileWriter2 = FileSink(StockReportOutput7) {
			param 
				file: "/tmp/007_splitsplit_ticker_output_stream_7.result";
		}

		() as FileWriter3 = FileSink(StockReportOutput9) {
			param 
				file: "/tmp/007_splitsplit_ticker_output_stream_9.result";
		}

		() as TXNPrinter = Custom(StockReportOutput7 as in0){
			logic
				onTuple in0: {
					println(in0);
				}
			config
				placement: partitionExlocation("output");
		}

		() as IBMPrinter = Custom(StockReportOutput1 as in0){
			logic
				onTuple in0: {
					println(in0);
				}
			config // isolate the console output so you can see output
				placement: partitionExlocation("output");
		}
		
		() as GBTSPrinter = Custom(StockReportOutput9 as in0){
			logic
				onTuple in0: {
					println(in0);
				}
			config
				placement: partitionExlocation("output");
		}
}
